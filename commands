Install Miccrok8s
==========
sudo snap install microk8s --classic --channel=1.21
sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube
sudo microk8s enable dns storage
sudo microk8s enable helm3
microk8s add-node


Active-mq
===========
microk8s kubectl create namespace active-mq
microk8s kubectl create secret generic creds --from-file=jetty-realm.properties -n active-mq
microk8s kubectl apply -f active-mq-sa.yaml -n active-mq
microk8s kubectl create -f active-mq-deploy.yaml -n active-mq
microk8s kubectl create -f active-mq-service.yaml -n active-mq

HDFS
============
microk8s kubectl create namespace hdfs
microk8s.helm3 repo add dmwm-bigdata https://mehrwertmacher.github.io/bigdata-charts

microk8s.helm3 install sdp-hdfs dmwm-bigdata/hdfs --version 1.0.1 -n hdfs




Spark
============
microk8s kubectl create namespace dce
microk8s kubectl create namespace spark-operator

microk8s.helm3 repo add spark-operator https://googlecloudplatform.github.io/spark-on-k8s-operator

microk8s.helm3 install spark-op spark-operator/spark-operator --namespace spark-operator --set sparkJobNamespace=dce

#microk8s.helm3 install spark-op spark-operator/spark-operator --set image.tag=v1beta2-1.3.3-3.1.1 --namespace spark-operator --set sparkJobNamespace=dce

microk8s.helm3 install spark-op spark-operator/spark-operator --namespace spark-operator --set sparkJobNamespace=dce,image.tag=latest



Mongo
===============
microk8s kubectl create namespace sdp-mongodb
microk8s.helm3 repo add bitnami https://charts.bitnami.com/bitnami
microk8s.helm3 install sdp-db bitnami/mongodb -n sdp-mongodb --set architecture="replicaset",volumePermissions.enabled=true,auth.rootPassword=iSynergy,auth.username=sdp-qh,auth.password=sdp$qH123,auth.database=dataprivacy,resources.requests.cpu=2000m,resources.requests.memory=2048Mi,resources.limits.cpu=7000m,resources.limits.memory=12288Mi,persistence.size=30Gi,auth.replicaSetKey=iSynergy,externalAccess.enabled=false


Redis
===============
microk8s.helm3 repo add bitnami https://charts.bitnami.com/bitnami
microk8s kubectl create namespace sdp-redis
microk8s.helm3 install sdp-cache -n sdp-redis --set auth.password=qhSdp23,architecture=standalone,volumePermissions.enabled=true bitnami/redis


postgresql
=================
microk8s kubectl create namespace sdp-rdbms
microk8s.helm3 install sdp-rdbms -n sdp-rdbms --set postgresqlPassword=TUd/oaMpd7k%,postgresqlDatabase=quartz_db,volumePermissions.enabled=true bitnami/postgresql


#microk8s.helm3 install sdp-rdbms -n sdp-rdbms --set postgresqlPassword=isynergy,postgresqlDatabase=quartz_db,volumePermissions.enabled=true bitnami/postgresql

microk8s.helm3 update sdp-rdbms -n sdp-rdbms --set postgresqlPassword=TUd/oaMpd7k%

didnt work:
microk8s.helm3 install 11.3.0 sdp-rdbms -n sdp-rdbms --set auth.postgresqlPassword=TUd/oaMpd7k%,postgresqlDatabase=quartz_db,volumePermissions.enabled=true bitnami/postgresql
==================================

psql -U postgres
postgres=# alter user postgres with password 'TUd/oaMpd7k%';
postgresl=# \q


user1@vm1:~/yml/cdo$ microk8s.helm3 install sdp-rdbms -n sdp-rdbms --set postgresqlPassword=TUd/oaMpd7k%,postgresqlDatabase=quartz_db,volumePermissions.enabled=true bitnami/postgresql
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /var/snap/microk8s/3202/credentials/client.config
NAME: sdp-rdbms
LAST DEPLOYED: Wed May 18 06:34:51 2022
NAMESPACE: sdp-rdbms
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: postgresql
CHART VERSION: 11.1.28
APP VERSION: 14.2.0

** Please be patient while the chart is being deployed **

PostgreSQL can be accessed via port 5432 on the following DNS names from within your cluster:

    sdp-rdbms-postgresql.sdp-rdbms.svc.cluster.local - Read/Write connection

To get the password for "postgres" run:

    export POSTGRES_PASSWORD=$(mk get secret --namespace sdp-rdbms sdp-rdbms-postgresql -o jsonpath="{.data.postgres-password}" | base64 --decode)

To connect to your database run the following command:

    kubectl run sdp-rdbms-postgresql-client --rm --tty -i --restart='Never' --namespace sdp-rdbms --image docker.io/bitnami/postgresql:14.2.0-debian-10-r88 --env="PGPASSWORD=$POSTGRES_PASSWORD" \
      --command -- psql --host sdp-rdbms-postgresql -U postgres -d postgres -p 5432
	  
	  
	   mk run sdp-rdbms-postgresql-client --rm --tty -i --restart='Never' --namespace sdp-rdbms --image docker.io/bitnami/postgresql:14.2.0-debian-170-r88 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql --host sdp-rdbms-postgresql -U postgres -d postgres -p 5432

    > NOTE: If you access the container using bash, make sure that you execute "/opt/bitnami/scripts/entrypoint.sh /bin/bash" in order to avoid the error "psql: local user with ID 1001} does not exist"

To connect to your database from outside the cluster execute the following commands:

    kubectl port-forward --namespace sdp-rdbms svc/sdp-rdbms-postgresql 5432:5432 & PGPASSWORD="$POSTGRES_PASSWORD" psql --host 127.0.0.1 -U postgres -d postgres -p 5432
	
tzSFEDI6lv
mk port-forward --namespace sdp-rdbms svc/sdp-rdbms-postgresql 5432:5432 

&
    PGPASSWORD="$POSTGRES_PASSWORD" psql --host 127.0.0.1 -U postgres -d postgres -p 5432


MXExWWZ5dTVLcg==

tzSFEDI6lv
tzSFEDI6lv

as of 15-6





=============================================







microk8s.helm3 install sdp-hdfs gaffer/hdfs --version 1.0.0 -n hdfs

==============
microk8s kubectl create namespace hdfs
microk8s.helm3 repo add dmwm-bigdata https://mehrwertmacher.github.io/bigdata-charts
microk8s.helm3 install sdp-hdfs dmwm-bigdata/hdfs --version 1.0.1 -n hdfs


user1@vm1:~$ microk8s kubectl create namespace hdfs
namespace/hdfs created
user1@vm1:~$ microk8s.helm3 repo add dmwm-bigdata https://mehrwertmacher.github.io/bigdata-charts
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /var/snap/microk8s/3202/credentials/client.config
"dmwm-bigdata" has been added to your repositories
user1@vm1:~$ microk8s.helm3 install sdp-hdfs dmwm-bigdata/hdfs --version 1.0.1 -n hdfs
WARNING: Kubernetes configuration file is group-readable. This is insecure. Location: /var/snap/microk8s/3202/credentials/client.config
W0511 05:53:59.915404  940969 warnings.go:70] policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget
W0511 05:53:59.920775  940969 warnings.go:70] policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget
W0511 05:54:00.094146  940969 warnings.go:70] policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget
W0511 05:54:00.127598  940969 warnings.go:70] policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget
NAME: sdp-hdfs
LAST DEPLOYED: Wed May 11 05:53:59 2022
NAMESPACE: hdfs
STATUS: deployed
REVISION: 1
NOTES:
1. You can check the status of HDFS by running this command:
   kubectl exec -n hdfs -it sdp-hdfs-namenode-0 -- hdfs dfsadmin -report
   
   mk exec -n hdfs -it sdp-hdfs-namenode-0 -- hdfs dfsadmin -report
   
 mk exec -n hdfs -it sdp-hdfs-namenode-0 -- hdfs dfs -ls /


2. Create a port-forward to the hdfs manager UI:
   kubectl port-forward -n hdfs sdp-hdfs-namenode-0 9870:9870
   
   mk port-forward -n hdfs sdp-hdfs-namenode-0 9870:9870

   Then open the ui in your browser:

   open http://localhost:9870



=============================
SSL

microk8s helm3 repo add jetstack https://charts.jetstack.io
microk8s helm3 repo update
mk apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.crds.yaml

AWS Cli

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
./aws/install -i /usr/local/aws-cli -b /usr/local/bin

AWS Configure

aws configure set aws_access_key_id "
user@user-ThinkPad-T470s:~$ aws configure set aws_secret_access_key "
user@user-ThinkPad-T470s:~$ aws configure set region "us-east-1"




spark-opr link - https://googlecloudplatform.github.io/spark-on-k8s-operator/

#!/usr/bin/env bash
sleep 300
kube_namespaces=($(/snap/bin/microk8s.kubectl get secret --all-namespaces | grep regcred | awk '{print $1}'))
for i in "${kube_namespaces[@]}"
do
  :
  echo "$(date): Updating secret for namespace - $i"
  /snap/bin/microk8s.kubectl delete secret regcred --namespace $i
  /snap/bin/microk8s.kubectl create secret docker-registry regcred \
  --docker-server=102539048997.dkr.ecr.ap-south-1.amazonaws.com \
  --docker-username=AWS \
  --docker-password=$(aws ecr get-login-password) \
  --namespace=$i
done



*/5 * * * *    /home/ubuntu/updator/ecr.sh >> /home/ubuntu/updater/log/aws-ecr-update-credentials.log 2>&1
@reboot /home/ubuntu/updator/ecr.sh >> /home/ubuntu/updater/log/aws-ecr-update-credentials.log 2>&1


#!/usr/bin/env bash
sudo microk8s refresh-certs -e front-proxy-client.crt
sudo microk8s refresh-certs -e server.crt
sudo microk8s refresh-certs -c

create ns cdo-pco

dde

dce

pb

 /snap/bin/microk8s.kubectl create secret docker-registry regcred \
  --docker-server=406250959263.dkr.ecr.ap-south-1.amazonaws.com \
  --docker-username=AWS \
  --docker-password=$(aws ecr get-login-password) \
  --namespace=cdo-pco



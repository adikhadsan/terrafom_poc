terraform {
  required_providers {
    vsphere = {
      source = "hashicorp/vsphere"
      version = "2.2.0"
    }
  }
}
provider "vsphere" {
  user                 = "dhanashri01.c@quickheal.com"
  password             = "Quick@#$16"
  vsphere_server       = "qhvc-02.vm.qhtpl.com"
  allow_unverified_ssl = true
}
#locals {
 # templatevars = {
   # name         = first-vm
   # ipv4_address = var.ipv4_address,
   # ipv4_gateway = var.ipv4_gateway,
   # dns_server_1 = var.dns_server_list[0],
   # dns_server_2 = var.dns_server_list[1],
   # public_key = var.public_key,
   # ssh_username = var.ssh_username
 # }
#}

data "vsphere_datacenter" "dc" {
  name = "QHDC02"
}
data "vsphere_datastore" "datastore" {
  name          = "X2QHDC02-LUN15"
  datacenter_id = data.vsphere_datacenter.dc.id
}
data "vsphere_compute_cluster" "cluster" {
  name          = "HITACHI POC"
  datacenter_id = data.vsphere_datacenter.dc.id
}
data "vsphere_network" "network" {
  name          = "VLAN-190"
  datacenter_id = data.vsphere_datacenter.dc.id
}
data "vsphere_virtual_machine" "template" {
  name          = "INFHAPTPLV02D"
  datacenter_id = data.vsphere_datacenter.dc.id
}

#data "vsphere_resource_pool" "pool" {}

resource "vsphere_virtual_machine" "vm" {
  name             = "ubuntu"
  resource_pool_id = data.vsphere_compute_cluster.cluster.resource_pool_id
 # resource_pool_id = data.vsphere_resource_pool.pool.id
  datastore_id     = data.vsphere_datastore.datastore.id
  num_cpus             = 4
  num_cores_per_socket = 1
  memory               = 4096
 # guest_id             = "ubuntu64Guest"
  guest_id         = data.vsphere_virtual_machine.template.guest_id
  scsi_type        = data.vsphere_virtual_machine.template.scsi_type
  nested_hv_enabled    = true
  network_interface {
    network_id   = data.vsphere_network.network.id
    adapter_type = lone {
    template_uuid = data.vsphere_virtual_machine.template.id
    customize {
      linux_options {
        host_name = "hello-world"
        domain    = "example.com"
      }
    }
  }
  disk {
   size             = data.vsphere_virtual_machine.template.disks.0.size
  # name             = "ubuntu.vmdk"
   label            = "disk.0"
   thin_provisioned = data.vsphere_virtual_machine.template.disks.0.thin_provisioned
   eagerly_scrub    = data.vsphere_virtual_machine.template.disks.0.eagerly_scrub
  # attach           = true
  # datastore_id     = data.vsphere_datastore.datastore.id

   # size             = var.disksize == "" ? data.vsphere_virtual_machine.template.disks.0.size : var.disksize
   # size             = 40 
  }
 # clone {
 #   template_uuid = data.vsphere_virtual_machine.template.id
#  }
 # extra_config = {
  #  "guestinfo.metadata"          = base64encode(templatefile("${path.module}/templates/metadata.yaml", local.templatevars))
  #  "guestinfo.metadata.encoding" = "base64"
  #  "guestinfo.userdata"          = base64encode(templatefile("${path.module}/templates/userdata.yaml", local.templatevars))
  #  "guestinfo.userdata.encoding" = "base64"
 # }
 # lifecycle {
  #  ignore_changes = [
  #    annotation,
  #    clone[0].template_uuid,
  #    clone[0].customize[0].dns_server_list,
  #    clone[0].customize[0].network_interface[0]
  #  ]
  #}
}


